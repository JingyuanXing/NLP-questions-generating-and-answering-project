# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJsgNwgOq34RctIR6AQoqiq7lbKBDigv
"""

from google.colab import drive
drive.mount('/content/gdrive')

import nltk
from nltk.tokenize import word_tokenize
from nltk.tokenize import sent_tokenize
nltk.download("popular")

r = open(file = "a1.txt", mode = "r")
text = r.read()

text = text.replace("(", ",")
text = text.replace(")", ",")
text_lines = text.splitlines()

sent_tokens = sent_tokenize(text_lines[4])
sents_tagged = [nltk.pos_tag(word_tokenize(sent)) for sent in sent_tokens]

grammar = r"""

NP: {(<PRP$>|<DT>)?(<JJ.*>)*(<NN.*>+)(<,>?<IN>?<DT>?<JJ>*<NN.*>+<,>?)*} 
    {<NP>+<VBN><IN><NP>+}


VP: {<VB.*><NP|CLAUSE>}
    {<VBD><RB>*<VBN><IN><NP|CLAUSE>}
AD: {<RB>*<VBN>?<IN><NP>}


CLAUSE: {<WDT|WP|WP$|WRB|CC>?<NP><VP><AD>*}
        
"""
cp = nltk.RegexpParser(grammar)
result = cp.parse(sents_tagged[0])
print(result)

relations = []
from nltk import Tree
import string
if_main_clause = True
for i,child in enumerate(result):
    if isinstance(child, Tree) and child.label()=="CLAUSE":
        NP = list()
        Actions = list()
        NP2 = list()
        for j, gchild in enumerate(child):
            if not isinstance(gchild,Tree) and gchild[1] in ['WDT','WP','WP$','WRB','CC'] and j == 0:
                if_main_clause = False
            elif isinstance(gchild, Tree) and gchild.label() == "NP":
                words, tags = zip(*gchild.leaves())
                NP.append(" ".join(words))
            elif isinstance(gchild, Tree) and gchild.label() == "VP":
                for k, ggchild in enumerate(gchild):
                    if not isinstance(ggchild, Tree) and ggchild[1] in ['VBZ', "VBD", "VBN", "IN"]:
                        Actions.append(ggchild[0])
                    elif isinstance(ggchild, Tree) and ggchild.label() in ['CLAUSE', "NP"]:
                        words, tags = zip(*ggchild)
                        NP2.append(" ".join(words))
        a = [tuple(NP), tuple(Actions), tuple(NP2)]
        relations.append(a)

print(relations)